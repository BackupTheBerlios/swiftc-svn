# Swift compiler framework
# Copyright (C) 2007-2009 Roland Lei√üa <r_leis01@math.uni-muenster.de>
#
# This framework is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 3 as published by the Free Software Foundation.
#
# This framework is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this framework; see the file LICENSE. If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301, USA.

simd class Vec3
    TYPE x
    TYPE y
    TYPE z

    simd routine ifelse(Vec3 v) -> Vec3 result
        TYPE vx = v.x
        TYPE vy = v.y
        TYPE vz = v.z

        TYPE resultx
        TYPE resulty
        TYPE resultz

        if vz < ZERO
            resultx = -vx
            resulty = -vy
            resultz = -vz
        else 
            resultx = vx * vx
            resulty = vy * vy
            resultz = vz * vz
        end

        result.x = resultx
        result.y = resulty
        result.z = resultz
    end

    routine main() -> int result
        simd{Vec3} vecs1 = 80000000x
        simd{Vec3} vecs2 = 80000000x

        simd[0x, 80000000x]: vecs1 = Vec3::ifelse(vecs2)

        result = 0
    end
end
