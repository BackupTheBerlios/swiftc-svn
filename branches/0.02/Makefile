-include config

BINARY   ?= swift
BUILDDIR ?= objs

# release or debug
BUILD ?= debug

# others most likely don't work
BISON ?= bison
FLEX  ?= flex

CXXFLAGS += -I.
ifeq (BUILD, debug)
	CXXFLAGS := -DSWIFT_DEBUG
endif
ifeq (BUILD, release)
	CXXFLAGS := -DNDEBUG
endif

# 
# bison stuff
#

BISON_IN := fe/parser.y
BISON_CPP_OUT := fe/parser.cpp
BISON_DEFINES := fe/parser.inner.h
BISON_HDR_OUT := $(BISON_DEFINES) fe/position.hh fe/stack.hh fe/location.hh
BISON_ALL_OUT := $(BISON_HDR_OUT) $(BISON_CPP_OUT)
BISONFLAGS := -Wall --language=C++ --locations -p swift_ --defines=$(BISON_DEFINES) -o $(BISON_CPP_OUT) $(BISON_IN)
ifeq (BUILD, debug)
	BISONFLAGS += -t -v
endif

# 
# bison stuff
#

FLEX_IN   := fe/lexer.l
FLEX_OUT  := fe/lexer.cpp
FLEXFLAGS := -P swift_ -o $(FLEX_OUT) $(FLEX_IN)

# autogenerated stuff -- include first!!!
SRCS := $(BISON_CPP_OUT) $(FLEX_OUT)

SRCS += fe/classanalyzer.cpp
SRCS += fe/classcodegen.cpp
SRCS += fe/class.cpp
SRCS += fe/cmdlineparser.cpp
SRCS += fe/context.cpp
SRCS += fe/error.cpp
SRCS += fe/fct.cpp
SRCS += fe/fctvectorizer.cpp
SRCS += fe/llvmfctdeclarer.cpp
SRCS += fe/llvmtypebuilder.cpp
SRCS += fe/main.cpp
SRCS += fe/node.cpp
SRCS += fe/scope.cpp
SRCS += fe/sig.cpp
SRCS += fe/stmntanalyzer.cpp
SRCS += fe/stmntcodegen.cpp
SRCS += fe/stmnt.cpp
SRCS += fe/tnlist.cpp
SRCS += fe/type.cpp
SRCS += fe/typelist.cpp
SRCS += fe/typenodeanalyzer.cpp
SRCS += fe/typenodecodegen.cpp
SRCS += fe/typenode.cpp
SRCS += fe/var.cpp

SRCS += utils/assert.cpp
SRCS += utils/llvmhelper.cpp
SRCS += utils/llvmplace.cpp
SRCS += utils/memmgr.cpp
SRCS += utils/stringhelper.cpp

SRCS += vec/vectype.cpp
#SRCS += vec/instrvectorizer.cpp

BUILD_BUILDDIR_TREE := $(shell mkdir -p $(addprefix $(BUILDDIR)/,$(sort $(dir $(SRCS)))))

OBJS := $(SRCS:%.cpp=$(BUILDDIR)/%.o)
DEPS := $(OBJS:.o=.d)

# use 'make Q=' in order to get a verbose make output
Q ?= @


.SUFFIXES: .c .o .d .y .l
.PHONY: clean all
.SECONDARY: $(BISON_ALL_OUT) $(FLEX_OUT)

all: $(BINARY)

-include $(DEPS)

$(FLEX_OUT): $(FLEX_IN)
	@echo '===> FLEX $@' 
	$(Q)$(FLEX) $(FLEXFLAGS)

$(BISON_CPP_OUT): $(BISON_IN)	
	@echo '===> BISON $@'
	$(Q)$(BISON) $(BISONFLAGS) && ./repair_position.sh

$(BUILDDIR)/%.o: %.cpp
	@echo '===> CXX $<'
	$(Q)$(CXX) $(CXXFLAGS) -c -MMD -o $@ $<

$(BINARY): $(OBJS)
	@echo '===> LD $@'
	$(Q)$(CXX) $(OBJS) $(CXXFLAGS) $(LDFLAGS) -o $@


clean: 
	@echo '===> CLEAN' 
	$(Q)rm -fr $(BUILDDIR) $(BINARY) $(FLEX_OUT) $(BISON_ALL_OUT)
